{
  "contractName": "SysCallTest",
  "abi": [
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "S",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5061013a806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634be1c7961461008f575b34801561004d57600080fd5b506180005460076000526001602052618000604052610164606052602060806061601f335af41515610089576080516109c401600d526020600dfd5b60206080f35b34801561009b57600080fd5b506100a46100a6565b005b618000546007600052600160205261800060405260018101606052602060806061601f335af415156100e25760805161089801600d526020600dfd5b61800054600d5260018101618000541415156101085760805161089801600d526020600dfd5b60206080f300a165627a7a72305820115d5b3b9f93aba6c83b6a288111b6efa31d0eebdde9d2610cd6fb3edfaf3fa80029",
  "deployedBytecode": "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634be1c7961461008f575b34801561004d57600080fd5b506180005460076000526001602052618000604052610164606052602060806061601f335af41515610089576080516109c401600d526020600dfd5b60206080f35b34801561009b57600080fd5b506100a46100a6565b005b618000546007600052600160205261800060405260018101606052602060806061601f335af415156100e25760805161089801600d526020600dfd5b61800054600d5260018101618000541415156101085760805161089801600d526020600dfd5b60206080f300a165627a7a72305820115d5b3b9f93aba6c83b6a288111b6efa31d0eebdde9d2610cd6fb3edfaf3fa80029",
  "sourceMap": "26:2106:19:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:2106:19;;;;;;;",
  "deployedSourceMap": "26:2106:19:-;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:2106:19;1332:6;1326:13;1470:4;1466:3;1459:16;1545:4;1540;1533:17;1629:6;1624:4;1617:19;1703:3;1698:4;1691:16;1978:4;1972;1968:2;1964;1956:6;1951:3;1938:45;1931:53;1928:2;;;2029:4;2023:11;2018:4;2014:21;2010:3;2003:33;2064:4;2060:3;2053:16;1928:2;2109:4;2103;2096:18;53:1141;;8:9:-1;5:2;;;30:1;27;20:12;5:2;53:1141:19;;;;;;;187:6;181:13;325:4;321:3;314:16;400:4;395;388:17;484:6;479:4;472:19;573:1;562:10;558:17;553:4;546:30;847:4;841;837:2;833;825:6;820:3;807:45;800:53;797:2;;;898:4;892:11;887:4;883:21;879:3;872:33;933:4;929:3;922:16;797:2;982:6;976:13;972:3;965:25;1045:1;1034:10;1030:17;1022:6;1016:13;1013:35;1006:43;1003:2;;;1094:4;1088:11;1083:4;1079:21;1075:3;1068:33;1129:4;1125:3;1118:16;1003:2;1173:4;1168;1161:17",
  "source": "pragma solidity ^0.4.17;\n\ncontract SysCallTest {\n    function S() public {\n        assembly {\n            // First get the original value from storage\n            let orig_value := sload(0x8000)\n            // First set up the input data (at memory location 0x0)\n            // The write call is 0x-07\n            mstore(0x0,0x07)\n            // The capability index is 0x-01\n            mstore(0x20,0x01)\n            // The storage location we want is 0x8000\n            mstore(0x40,0x8000)\n            // The value we want to store\n            mstore(0x60,add(orig_value,1))\n            // \"in_offset\" is at 31, because we only want the last byte of type\n            // \"in_size\" is 97 because it is 1+32+32+32\n            // we will store the result at 0x80 and it will be 32 bytes\n            if iszero(delegatecall(gas, caller, 31, 97, 0x80, 0x20)) {\n                mstore(0xd,add(2200,mload(0x80)))\n                revert(0xd,0x20)\n            }\n            mstore(0xd,sload(0x8000))\n            if iszero(eq(sload(0x8000),add(orig_value,1))) {\n                mstore(0xd,add(2200,mload(0x80)))\n                revert(0xd,0x20)\n            }\n            return(0x80,0x20)\n        }\n    }\n\n    function() public {\n        assembly {\n            // First get the original value from storage\n            let orig_value := sload(0x8000)\n            // First set up the input data (at memory location 0x0)\n            // The write call is 0x-07\n            mstore(0x0,0x07)\n            // The capability index is 0x-01\n            mstore(0x20,0x01)\n            // The storage location we want is 0x8000\n            mstore(0x40,0x8000)\n            // The value we want to store\n            mstore(0x60,356)\n            // \"in_offset\" is at 31, because we only want the last byte of type\n            // \"in_size\" is 97 because it is 1+32+32+32\n            // we will store the result at 0x80 and it will be 32 bytes\n            if iszero(delegatecall(gas, caller, 31, 97, 0x80, 0x20)) {\n                mstore(0xd,add(2500,mload(0x80)))\n                revert(0xd,0x20)\n            }\n            return(0x80, 0x20)\n        }\n    }\n}",
  "sourcePath": "/mnt/c/Users/Raketa/Documents/Repos/beakeros/contracts/test/valid/SysCallTest.sol",
  "ast": {
    "absolutePath": "/mnt/c/Users/Raketa/Documents/Repos/beakeros/contracts/test/valid/SysCallTest.sol",
    "exportedSymbols": {
      "SysCallTest": [
        2793
      ]
    },
    "id": 2794,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2782,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:19"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2793,
        "linearizedBaseContracts": [
          2793
        ],
        "name": "SysCallTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2786,
              "nodeType": "Block",
              "src": "73:1121:19",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 2785,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let orig_value := sload(0x8000)\n    mstore(0x0, 0x07)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x8000)\n    mstore(0x60, add(orig_value, 1))\n    if iszero(delegatecall(gas(), caller(), 31, 97, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    mstore(0xd, sload(0x8000))\n    if iszero(eq(sload(0x8000), add(orig_value, 1)))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0x80, 0x20)\n}",
                  "src": "83:1111:19"
                }
              ]
            },
            "documentation": null,
            "id": 2787,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "S",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2783,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "63:2:19"
            },
            "payable": false,
            "returnParameters": {
              "id": 2784,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "73:0:19"
            },
            "scope": 2793,
            "src": "53:1141:19",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2791,
              "nodeType": "Block",
              "src": "1218:912:19",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 2790,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let orig_value := sload(0x8000)\n    mstore(0x0, 0x07)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x8000)\n    mstore(0x60, 356)\n    if iszero(delegatecall(gas(), caller(), 31, 97, 0x80, 0x20))\n    {\n        mstore(0xd, add(2500, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0x80, 0x20)\n}",
                  "src": "1228:902:19"
                }
              ]
            },
            "documentation": null,
            "id": 2792,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2788,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1208:2:19"
            },
            "payable": false,
            "returnParameters": {
              "id": 2789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1218:0:19"
            },
            "scope": 2793,
            "src": "1200:930:19",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2794,
        "src": "26:2106:19"
      }
    ],
    "src": "0:2132:19"
  },
  "legacyAST": {
    "absolutePath": "/mnt/c/Users/Raketa/Documents/Repos/beakeros/contracts/test/valid/SysCallTest.sol",
    "exportedSymbols": {
      "SysCallTest": [
        2793
      ]
    },
    "id": 2794,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2782,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:19"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2793,
        "linearizedBaseContracts": [
          2793
        ],
        "name": "SysCallTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2786,
              "nodeType": "Block",
              "src": "73:1121:19",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 2785,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let orig_value := sload(0x8000)\n    mstore(0x0, 0x07)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x8000)\n    mstore(0x60, add(orig_value, 1))\n    if iszero(delegatecall(gas(), caller(), 31, 97, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    mstore(0xd, sload(0x8000))\n    if iszero(eq(sload(0x8000), add(orig_value, 1)))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0x80, 0x20)\n}",
                  "src": "83:1111:19"
                }
              ]
            },
            "documentation": null,
            "id": 2787,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "S",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2783,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "63:2:19"
            },
            "payable": false,
            "returnParameters": {
              "id": 2784,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "73:0:19"
            },
            "scope": 2793,
            "src": "53:1141:19",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2791,
              "nodeType": "Block",
              "src": "1218:912:19",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 2790,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let orig_value := sload(0x8000)\n    mstore(0x0, 0x07)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x8000)\n    mstore(0x60, 356)\n    if iszero(delegatecall(gas(), caller(), 31, 97, 0x80, 0x20))\n    {\n        mstore(0xd, add(2500, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0x80, 0x20)\n}",
                  "src": "1228:902:19"
                }
              ]
            },
            "documentation": null,
            "id": 2792,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2788,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1208:2:19"
            },
            "payable": false,
            "returnParameters": {
              "id": 2789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1218:0:19"
            },
            "scope": 2793,
            "src": "1200:930:19",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2794,
        "src": "26:2106:19"
      }
    ],
    "src": "0:2132:19"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-09-17T13:43:44.384Z"
}