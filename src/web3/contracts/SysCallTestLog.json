{
  "contractName": "SysCallTestLog",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "A",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "B",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "C",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "D",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "E",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506102e8806100206000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f529ba21461007257806332e7c5bf1461008957806383dfe5fd146100a057806392bbf6e8146100b7578063f446c1d0146100ce575b600080fd5b34801561007e57600080fd5b506100876100e5565b005b34801561009557600080fd5b5061009e610135565b005b3480156100ac57600080fd5b506100b5610179565b005b3480156100c357600080fd5b506100cc6101c3565b005b3480156100da57600080fd5b506100e3610219565b005b60096000526001602052600360405261abcd60605261beef60805261cafe60a05264123456789060c0526020608060c1601f335af415156101305760805161089801600d526020600dfd5b600080f35b60096000526001602052600160405261abcd606052641234567890608052602060806081601f335af415156101745760805161089801600d526020600dfd5b600080f35b60096000526001602052600260405261abcd60605261beef60805264123456789060a0526020608060a1601f335af415156101be5760805161089801600d526020600dfd5b600080f35b60096000526001602052600460405261abcd60605261beef60805261cafe60a05261454560c05264123456789060e0526020608060e1601f335af415156102145760805161089801600d526020600dfd5b600080f35b61025f565b6000602082066020038201604051915080156102535760005b818114151561025157600081840152602081019050610237565b505b80820160405250919050565b61026c602060040261021e565b60206102778161021e565b600960008401526001602084015260006040840152641234567890606084015281816061601f8601335af415156102b757805161089801600d526020600dfd5b600081f300a165627a7a723058200f2960490f766441ed4db9022bfaed002650311adfdb0548e1a512e9a2565b6f0029",
  "deployedBytecode": "0x60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f529ba21461007257806332e7c5bf1461008957806383dfe5fd146100a057806392bbf6e8146100b7578063f446c1d0146100ce575b600080fd5b34801561007e57600080fd5b506100876100e5565b005b34801561009557600080fd5b5061009e610135565b005b3480156100ac57600080fd5b506100b5610179565b005b3480156100c357600080fd5b506100cc6101c3565b005b3480156100da57600080fd5b506100e3610219565b005b60096000526001602052600360405261abcd60605261beef60805261cafe60a05264123456789060c0526020608060c1601f335af415156101305760805161089801600d526020600dfd5b600080f35b60096000526001602052600160405261abcd606052641234567890608052602060806081601f335af415156101745760805161089801600d526020600dfd5b600080f35b60096000526001602052600260405261abcd60605261beef60805264123456789060a0526020608060a1601f335af415156101be5760805161089801600d526020600dfd5b600080f35b60096000526001602052600460405261abcd60605261beef60805261cafe60a05261454560c05264123456789060e0526020608060e1601f335af415156102145760805161089801600d526020600dfd5b600080f35b61025f565b6000602082066020038201604051915080156102535760005b818114151561025157600081840152602081019050610237565b505b80820160405250919050565b61026c602060040261021e565b60206102778161021e565b600960008401526001602084015260006040840152641234567890606084015281816061601f8601335af415156102b757805161089801600d526020600dfd5b600081f300a165627a7a723058200f2960490f766441ed4db9022bfaed002650311adfdb0548e1a512e9a2565b6f0029",
  "sourceMap": "26:6222:29:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:6222:29;;;;;;;",
  "deployedSourceMap": "26:6222:29:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3996:1077;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3996:1077:29;;;;;;1971:947;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1971:947:29;;;;;;2949:1014;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2949:1014:29;;;;;;5105:1141;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5105:1141:29;;;;;;80:1856;;8:9:-1;5:2;;;30:1;27;20:12;5:2;80:1856:29;;;;;;3996:1077;4165:4;4161:3;4154:16;4240:4;4235;4228:17;4318:3;4313:4;4306:16;4378:6;4373:4;4366:19;4442:6;4437:4;4430:19;4505:6;4500:4;4493:19;4577:12;4572:4;4565:25;4869:4;4863;4858:3;4854:2;4846:6;4841:3;4828:46;4821:54;4818:2;;;4920:4;4914:11;4909:4;4905:21;4901:3;4894:33;4955:4;4951:3;4944:16;4818:2;5055:1;5053;5046:11;1971:947;2140:4;2136:3;2129:16;2215:4;2210;2203:17;2293:3;2288:4;2281:16;2353:6;2348:4;2341:19;2425:12;2420:4;2413:25;2714:4;2708;2703:3;2699:2;2691:6;2686:3;2673:46;2666:54;2663:2;;;2765:4;2759:11;2754:4;2750:21;2746:3;2739:33;2800:4;2796:3;2789:16;2663:2;2900:1;2898;2891:11;2949:1014;3118:4;3114:3;3107:16;3193:4;3188;3181:17;3271:3;3266:4;3259:16;3331:6;3326:4;3319:19;3395:6;3390:4;3383:19;3467:12;3462:4;3455:25;3759:4;3753;3748:3;3744:2;3736:6;3731:3;3718:46;3711:54;3708:2;;;3810:4;3804:11;3799:4;3795:21;3791:3;3784:33;3845:4;3841:3;3834:16;3708:2;3945:1;3943;3936:11;5105:1141;5274:4;5270:3;5263:16;5349:4;5344;5337:17;5427:3;5422:4;5415:16;5487:6;5482:4;5475:19;5551:6;5546:4;5539:19;5614:6;5609:4;5602:19;5678:6;5673:4;5666:19;5750:12;5745:4;5738:25;6042:4;6036;6031:3;6027:2;6019:6;6014:3;6001:46;5994:54;5991:2;;;6093:4;6087:11;6082:4;6078:21;6074:3;6067:33;6128:4;6124:3;6117:16;5991:2;6228:1;6226;6219:11;80:1856;133:784;;;;267:2;262:4;258:12;255:2;251:20;246:4;242:30;359:4;353:11;342:22;;502:5;499:2;;;607:1;592:131;624:5;621:1;618:12;611:20;592:131;;;699:1;696;689:6;685:13;678:23;646:2;643:1;639:10;634:15;;592:131;;;596:14;499:2;896:5;889:6;885:17;880:4;873:30;169:748;;;;;;941:21;958:2;956:1;952:9;941:21;;;990:4;1021:19;1032:7;1021:19;;;1178:4;1173:3;1169;1165:12;1158:25;1262:4;1256;1252:3;1248:13;1241:26;1349:3;1343:4;1339:3;1335:13;1328:25;1427:12;1421:4;1417:3;1413:13;1406:34;1722:7;1714:6;1710:2;1705;1701:3;1697:11;1689:6;1684:3;1671:59;1664:67;1661:2;;;1776:6;1770:13;1765:4;1761:23;1757:3;1750:35;1813:4;1809:3;1802:16;1661:2;1918:1;1911:6;1904:16",
  "source": "pragma solidity ^0.4.17;\n\ncontract SysCallTestLog {\n    // Log to no topics\n    function A() public {\n        assembly {\n            function mallocZero(size) -> result {\n                // align to 32-byte words\n                let rsize := add(size,sub(32,mod(size,32)))\n                // get the current free mem location\n                result :=  mload(0x40)\n                // zero-out the memory\n                // if there are some bytes to be allocated (rsize is not zero)\n                if rsize {\n                    // loop through the address and zero them\n                    for { let n := 0 } iszero(eq(n, rsize)) { n := add(n, 32) } {\n                        mstore(add(result,n),0)\n                    }\n\n                }\n                // Bump the value of 0x40 so that it holds the next\n                // available memory location.\n                mstore(0x40,add(result,rsize))\n            }\n            let ins := mallocZero(mul(4,32))\n            let retSize := 0x20\n            let retLoc := mallocZero(retSize)\n            // First set up the input data (at memory location ins)\n            // The log call is 0x-07\n            mstore(add(ins,0x0),0x09)\n            // The capability index is 0x-01\n            mstore(add(ins,0x20),0x01)\n            // The number of topics we will use\n            mstore(add(ins,0x40),0x0)\n            // The value we want to log\n            mstore(add(ins,0x60),0x1234567890)\n            // \"in_offset\" is at 31, because we only want the last byte of type\n            // \"in_size\" is 97 because it is 1+32+32+32\n            // we will store the result at 0x80 and it will be 32 bytes\n            if iszero(delegatecall(gas, caller, add(ins,31), 97, retLoc, retSize)) {\n                mstore(0xd,add(2200,mload(retLoc)))\n                revert(0xd,0x20)\n            }\n            // We don't need to return anything in success\n            return(retLoc,0)\n        }\n    }\n\n    // Log to a single topic\n    function B() public {\n        assembly {\n            // First set up the input data (at memory location 0x0)\n            // The log call is 0x-09\n            mstore(0x0,0x09)\n            // The capability index is 0x-01\n            mstore(0x20,0x01)\n            // The number of topics we will use\n            mstore(0x40,0x1)\n            // The first topic\n            mstore(0x60,0xabcd)\n            // The value we want to log\n            mstore(0x80,0x1234567890)\n            // \"in_offset\" is at 31, because we only want the last byte of type\n            // \"in_size\" is 129 because it is 1+32+32+32+32\n            // we will store the result at 0x80 and it will be 32 bytes\n            if iszero(delegatecall(gas, caller, 31, 129, 0x80, 0x20)) {\n                mstore(0xd,add(2200,mload(0x80)))\n                revert(0xd,0x20)\n            }\n            // We don't need to return anything in success\n            return(0,0)\n        }\n    }\n\n    // Log to two topics\n    function C() public {\n        assembly {\n            // First set up the input data (at memory location 0x0)\n            // The log call is 0x-09\n            mstore(0x0,0x09)\n            // The capability index is 0x-01\n            mstore(0x20,0x01)\n            // The number of topics we will use\n            mstore(0x40,0x2)\n            // The first topic\n            mstore(0x60,0xabcd)\n            // The second topic\n            mstore(0x80,0xbeef)\n            // The value we want to log\n            mstore(0xa0,0x1234567890)\n            // \"in_offset\" is at 31, because we only want the last byte of type\n            // \"in_size\" is 129 because it is 1+32+32+32+32+32\n            // we will store the result at 0x80 and it will be 32 bytes\n            if iszero(delegatecall(gas, caller, 31, 161, 0x80, 0x20)) {\n                mstore(0xd,add(2200,mload(0x80)))\n                revert(0xd,0x20)\n            }\n            // We don't need to return anything in success\n            return(0,0)\n        }\n    }\n\n    // Log to three topics\n    function D() public {\n        assembly {\n            // First set up the input data (at memory location 0x0)\n            // The log call is 0x-09\n            mstore(0x0,0x09)\n            // The capability index is 0x-01\n            mstore(0x20,0x01)\n            // The number of topics we will use\n            mstore(0x40,0x3)\n            // The first topic\n            mstore(0x60,0xabcd)\n            // The second topic\n            mstore(0x80,0xbeef)\n            // The third topic\n            mstore(0xa0,0xcafe)\n            // The value we want to log\n            mstore(0xc0,0x1234567890)\n            // \"in_offset\" is at 31, because we only want the last byte of type\n            // \"in_size\" is 129 because it is 1+32+32+32+32+32\n            // we will store the result at 0x80 and it will be 32 bytes\n            if iszero(delegatecall(gas, caller, 31, 193, 0x80, 0x20)) {\n                mstore(0xd,add(2200,mload(0x80)))\n                revert(0xd,0x20)\n            }\n            // We don't need to return anything in success\n            return(0,0)\n        }\n    }\n\n    // Log to four topics\n    function E() public {\n        assembly {\n            // First set up the input data (at memory location 0x0)\n            // The log call is 0x-09\n            mstore(0x0,0x09)\n            // The capability index is 0x-01\n            mstore(0x20,0x01)\n            // The number of topics we will use\n            mstore(0x40,0x4)\n            // The first topic\n            mstore(0x60,0xabcd)\n            // The second topic\n            mstore(0x80,0xbeef)\n            // The third topic\n            mstore(0xa0,0xcafe)\n            // The fourth topic\n            mstore(0xc0,0x4545)\n            // The value we want to log\n            mstore(0xe0,0x1234567890)\n            // \"in_offset\" is at 31, because we only want the last byte of type\n            // \"in_size\" is 129 because it is 1+32+32+32+32+32\n            // we will store the result at 0x80 and it will be 32 bytes\n            if iszero(delegatecall(gas, caller, 31, 225, 0x80, 0x20)) {\n                mstore(0xd,add(2200,mload(0x80)))\n                revert(0xd,0x20)\n            }\n            // We don't need to return anything in success\n            return(0,0)\n        }\n    }\n}",
  "sourcePath": "/mnt/c/Users/Raketa/Documents/Repos/beakeros/contracts/test/valid/SysCallTestLog.sol",
  "ast": {
    "absolutePath": "/mnt/c/Users/Raketa/Documents/Repos/beakeros/contracts/test/valid/SysCallTestLog.sol",
    "exportedSymbols": {
      "SysCallTestLog": [
        3357
      ]
    },
    "id": 3358,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3331,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:29"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 3357,
        "linearizedBaseContracts": [
          3357
        ],
        "name": "SysCallTestLog",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3335,
              "nodeType": "Block",
              "src": "100:1836:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3334,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    function mallocZero(size) -> result\n    {\n        let rsize := add(size, sub(32, mod(size, 32)))\n        result := mload(0x40)\n        if rsize\n        {\n            for {\n                let n := 0\n            }\n            iszero(eq(n, rsize))\n            {\n                n := add(n, 32)\n            }\n            {\n                mstore(add(result, n), 0)\n            }\n        }\n        mstore(0x40, add(result, rsize))\n    }\n    let ins := mallocZero(mul(4, 32))\n    let retSize := 0x20\n    let retLoc := mallocZero(retSize)\n    mstore(add(ins, 0x0), 0x09)\n    mstore(add(ins, 0x20), 0x01)\n    mstore(add(ins, 0x40), 0x0)\n    mstore(add(ins, 0x60), 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), add(ins, 31), 97, retLoc, retSize))\n    {\n        mstore(0xd, add(2200, mload(retLoc)))\n        revert(0xd, 0x20)\n    }\n    return(retLoc, 0)\n}",
                  "src": "110:1826:29"
                }
              ]
            },
            "documentation": null,
            "id": 3336,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "A",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3332,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "90:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3333,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "100:0:29"
            },
            "scope": 3357,
            "src": "80:1856:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3340,
              "nodeType": "Block",
              "src": "1991:927:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3339,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    mstore(0x0, 0x09)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x1)\n    mstore(0x60, 0xabcd)\n    mstore(0x80, 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), 31, 129, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0, 0)\n}",
                  "src": "2001:917:29"
                }
              ]
            },
            "documentation": null,
            "id": 3341,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "B",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3337,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1981:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3338,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1991:0:29"
            },
            "scope": 3357,
            "src": "1971:947:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3345,
              "nodeType": "Block",
              "src": "2969:994:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3344,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    mstore(0x0, 0x09)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x2)\n    mstore(0x60, 0xabcd)\n    mstore(0x80, 0xbeef)\n    mstore(0xa0, 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), 31, 161, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0, 0)\n}",
                  "src": "2979:984:29"
                }
              ]
            },
            "documentation": null,
            "id": 3346,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "C",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3342,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2959:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3343,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2969:0:29"
            },
            "scope": 3357,
            "src": "2949:1014:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3350,
              "nodeType": "Block",
              "src": "4016:1057:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3349,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    mstore(0x0, 0x09)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x3)\n    mstore(0x60, 0xabcd)\n    mstore(0x80, 0xbeef)\n    mstore(0xa0, 0xcafe)\n    mstore(0xc0, 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), 31, 193, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0, 0)\n}",
                  "src": "4026:1047:29"
                }
              ]
            },
            "documentation": null,
            "id": 3351,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "D",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3347,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4006:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3348,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4016:0:29"
            },
            "scope": 3357,
            "src": "3996:1077:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3355,
              "nodeType": "Block",
              "src": "5125:1121:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3354,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    mstore(0x0, 0x09)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x4)\n    mstore(0x60, 0xabcd)\n    mstore(0x80, 0xbeef)\n    mstore(0xa0, 0xcafe)\n    mstore(0xc0, 0x4545)\n    mstore(0xe0, 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), 31, 225, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0, 0)\n}",
                  "src": "5135:1111:29"
                }
              ]
            },
            "documentation": null,
            "id": 3356,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "E",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3352,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5115:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3353,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5125:0:29"
            },
            "scope": 3357,
            "src": "5105:1141:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3358,
        "src": "26:6222:29"
      }
    ],
    "src": "0:6248:29"
  },
  "legacyAST": {
    "absolutePath": "/mnt/c/Users/Raketa/Documents/Repos/beakeros/contracts/test/valid/SysCallTestLog.sol",
    "exportedSymbols": {
      "SysCallTestLog": [
        3357
      ]
    },
    "id": 3358,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3331,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:29"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 3357,
        "linearizedBaseContracts": [
          3357
        ],
        "name": "SysCallTestLog",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3335,
              "nodeType": "Block",
              "src": "100:1836:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3334,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    function mallocZero(size) -> result\n    {\n        let rsize := add(size, sub(32, mod(size, 32)))\n        result := mload(0x40)\n        if rsize\n        {\n            for {\n                let n := 0\n            }\n            iszero(eq(n, rsize))\n            {\n                n := add(n, 32)\n            }\n            {\n                mstore(add(result, n), 0)\n            }\n        }\n        mstore(0x40, add(result, rsize))\n    }\n    let ins := mallocZero(mul(4, 32))\n    let retSize := 0x20\n    let retLoc := mallocZero(retSize)\n    mstore(add(ins, 0x0), 0x09)\n    mstore(add(ins, 0x20), 0x01)\n    mstore(add(ins, 0x40), 0x0)\n    mstore(add(ins, 0x60), 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), add(ins, 31), 97, retLoc, retSize))\n    {\n        mstore(0xd, add(2200, mload(retLoc)))\n        revert(0xd, 0x20)\n    }\n    return(retLoc, 0)\n}",
                  "src": "110:1826:29"
                }
              ]
            },
            "documentation": null,
            "id": 3336,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "A",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3332,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "90:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3333,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "100:0:29"
            },
            "scope": 3357,
            "src": "80:1856:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3340,
              "nodeType": "Block",
              "src": "1991:927:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3339,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    mstore(0x0, 0x09)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x1)\n    mstore(0x60, 0xabcd)\n    mstore(0x80, 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), 31, 129, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0, 0)\n}",
                  "src": "2001:917:29"
                }
              ]
            },
            "documentation": null,
            "id": 3341,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "B",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3337,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1981:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3338,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1991:0:29"
            },
            "scope": 3357,
            "src": "1971:947:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3345,
              "nodeType": "Block",
              "src": "2969:994:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3344,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    mstore(0x0, 0x09)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x2)\n    mstore(0x60, 0xabcd)\n    mstore(0x80, 0xbeef)\n    mstore(0xa0, 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), 31, 161, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0, 0)\n}",
                  "src": "2979:984:29"
                }
              ]
            },
            "documentation": null,
            "id": 3346,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "C",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3342,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2959:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3343,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2969:0:29"
            },
            "scope": 3357,
            "src": "2949:1014:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3350,
              "nodeType": "Block",
              "src": "4016:1057:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3349,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    mstore(0x0, 0x09)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x3)\n    mstore(0x60, 0xabcd)\n    mstore(0x80, 0xbeef)\n    mstore(0xa0, 0xcafe)\n    mstore(0xc0, 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), 31, 193, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0, 0)\n}",
                  "src": "4026:1047:29"
                }
              ]
            },
            "documentation": null,
            "id": 3351,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "D",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3347,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4006:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3348,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4016:0:29"
            },
            "scope": 3357,
            "src": "3996:1077:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3355,
              "nodeType": "Block",
              "src": "5125:1121:29",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 3354,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    mstore(0x0, 0x09)\n    mstore(0x20, 0x01)\n    mstore(0x40, 0x4)\n    mstore(0x60, 0xabcd)\n    mstore(0x80, 0xbeef)\n    mstore(0xa0, 0xcafe)\n    mstore(0xc0, 0x4545)\n    mstore(0xe0, 0x1234567890)\n    if iszero(delegatecall(gas(), caller(), 31, 225, 0x80, 0x20))\n    {\n        mstore(0xd, add(2200, mload(0x80)))\n        revert(0xd, 0x20)\n    }\n    return(0, 0)\n}",
                  "src": "5135:1111:29"
                }
              ]
            },
            "documentation": null,
            "id": 3356,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "E",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3352,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5115:2:29"
            },
            "payable": false,
            "returnParameters": {
              "id": 3353,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5125:0:29"
            },
            "scope": 3357,
            "src": "5105:1141:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3358,
        "src": "26:6222:29"
      }
    ],
    "src": "0:6248:29"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-10-17T15:36:37.280Z"
}